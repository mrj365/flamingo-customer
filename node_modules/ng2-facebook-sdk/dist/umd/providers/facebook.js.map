{"version":3,"file":"facebook.js","sourceRoot":"","sources":["../../../src/providers/facebook.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthResponse } from '../models/auth-response';\nimport { InitParams } from '../models/init-params';\nimport { LoginOptions } from '../models/login-options';\nimport { LoginResponse } from '../models/login-response';\nimport { LoginStatus } from '../models/login-status';\nimport { UIParams } from '../models/ui-params';\nimport { UIResponse } from '../models/ui-response';\n\ndeclare var FB: any;\n\n/**\n * @hidden\n */\nexport type ApiMethod = 'get' | 'post' | 'delete';\n\n/**\n * @shortdesc\n * Angular 2 service to inject to use Facebook's SDK\n * @description\n * You only need to inject this service in your application if you aren't using [`FacebookModule`](../facebook-module).\n * @usage\n * ```typescript\n * import { FacebookService, InitParams } from 'ng2-facebook-sdk';\n *\n * constructor(private fb: FacebookService) {\n *\n *   const params: InitParams = {\n *\n *   };\n *\n *   fb.init(params);\n *\n * }\n * ```\n */\n@Injectable()\nexport class FacebookService {\n\n  /**\n   * This method is used to initialize and setup the SDK.\n   * @param params {InitParams} Initialization parameters\n   */\n  init(params: InitParams): void {\n    try {\n      FB.init(params);\n    } catch (e) {\n      console.error('ng2-facebook-sdk: ', e);\n    }\n  }\n\n  /**\n   * This method lets you make calls to the Graph API\n   * @usage\n   * ```typescript\n   * this.fb.api('somepath')\n   *   .then(res => console.log(res))\n   *   .catch(e => console.log(e));\n   * ```\n   * @param path {string} The Graph API endpoint path that you want to call.\n   * @param [method=get] {string} The HTTP method that you want to use for the API request.\n   * @param [params] {Object} An object consisting of any parameters that you want to pass into your Graph API call.\n   * @returns {Promise<any>}\n   */\n  api(path: string, method: ApiMethod = 'get', params: any = {}): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n\n      try {\n        FB.api(path, method, params, (response: any) => {\n          if (!response) {\n            reject();\n          } else if (response.error) {\n            reject(response.error);\n          } else {\n            resolve(response);\n          }\n        });\n      } catch (e) {\n        reject(e);\n      }\n\n    });\n  }\n\n  /**\n   * This method is used to trigger different forms of Facebook created UI dialogs.\n   * These dialogs include:\n   * - Share dialog\n   * - Login dialog\n   * - Add page tab dialog\n   * - Requests dialog\n   * - Send dialog\n   * - Payments dialog\n   * - Go Live dialog\n   * @param params {UIParams} A collection of parameters that control which dialog is loaded, and relevant settings.\n   * @returns {Promise<UIResponse>}\n   */\n  ui(params: UIParams): Promise<UIResponse> {\n    return new Promise<any>((resolve, reject) => {\n\n      try {\n        FB.ui(params, (response: any) => {\n          if(!response) reject();\n          else if(response.error) reject(response.error);\n          else resolve(response);\n        });\n      } catch (e) {\n        reject(e);\n      }\n\n    });\n  }\n\n  /**\n   * This method allows you to determine if a user is logged in to Facebook and has authenticated your app.\n   * @returns {Promise<LoginStatus>}\n   */\n  getLoginStatus(): Promise<LoginStatus> {\n    return new Promise<LoginStatus>((resolve, reject) => {\n\n      try {\n        FB.getLoginStatus((response: LoginStatus) => {\n          if (!response) {\n            reject();\n          } else {\n            resolve(response);\n          }\n        });\n      } catch (e) {\n        reject(e);\n      }\n\n    });\n  }\n\n  /**\n   * Login the user\n   * @usage\n   * ```typescript\n   * // login without options\n   * this.fb.login()\n   *   .then((response: LoginResponse) => console.log('Logged in', response))\n   *   .catch(e => console.error('Error logging in'));\n   *\n   * // login with options\n   * const options: LoginOptions = {\n   *   scope: 'public_profiel,user_friends,email,pages_show_list',\n   *   return_scopes: true,\n   *   enable_profile_selector: true\n   * };\n   * this.fb.login(options)\n   *   .then(...)\n   *   .catch(...);\n   * ```\n   * @param [options] {LoginOptions} Login options\n   * @returns {Promise<LoginResponse>} returns a promise that resolves with [LoginResponse](../login-response) object, or rejects with an error\n   */\n  login(options?: LoginOptions): Promise<LoginResponse> {\n    return new Promise<LoginResponse>((resolve, reject) => {\n\n      try {\n        FB.login((response: LoginResponse) => {\n          if (response.authResponse) {\n            resolve(response);\n          }else{\n            reject();\n          }\n        }, options);\n      } catch (e) {\n        reject(e);\n      }\n\n    });\n  }\n\n  /**\n   * Logout the user\n   * @usage\n   * ```typescript\n   * this.fb.logout().then(() => console.log('Logged out!'));\n   * ```\n   * @returns {Promise<any>} returns a promise that resolves when the user is logged out\n   */\n  logout(): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n\n      try {\n        FB.logout((response: any) => {\n          resolve(response);\n        });\n      } catch (e) {\n        reject(e);\n      }\n\n    });\n  }\n\n  /**\n   * This synchronous function returns back the current authResponse.\n   * @usage\n   * ```typescript\n   * import { AuthResponse, FacebookService } from 'ng2-facebook-sdk';\n   *\n   * ...\n   *\n   * const authResponse: AuthResponse = this.fb.getAuthResponse();\n   * ```\n   * @returns {AuthResponse} returns an [AuthResponse](../auth-response) object\n   */\n  getAuthResponse(): AuthResponse {\n    try {\n      return <AuthResponse>FB.getAuthResponse();\n    } catch (e) {\n      console.error('ng2-facebook-sdk: ', e);\n    }\n  }\n\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}